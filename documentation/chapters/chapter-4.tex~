\chapter{Distance Computation And Simplification} \label{ch:distance}
This chapter describes how distance between finite diploid population and infinite population is calculated.
Then it discusses simplifications in computations made by our evolutionary equations and in distance computation.

\section{Distance}
Let vector ${\bm f}$ represent a finite diploid population; component
${\bm f}_\alpha$ is the prevalence of diploid $\alpha$.  Let the
support $S_{\bm f}$ of ${\bm f}$ be the set of diploids occurring in
the population represented by ${\bm f}$,\\[-0.03in]
\[
S_{\bm f} \; = \; \{ \alpha \, | \, {\bm f}_\alpha > 0 \}
\]
Let ${\bm q}$ similarly represent an infinite diploid population (see
section \ref{Model}).  As points in $\mathbb{R}^{2^\ell
  \times 2^\ell}$, the Euclidean distance between ${\bm f}$ and ${\bm
  q}$ is \\[-0.175in]
\[
\|{\bm f} - {\bm q} \hspace{0.005in} \| \; = \;
  {\sum_{\alpha}}^{\frac{1}{2}} ({\bm f}_\alpha-{\bm q}_\alpha)^2\\[-.02in]
\]
Whereas a naive computation of this distance involves ${2^\ell \cdot
  2^\ell}$ terms, leveraging equation (\ref{model1}) can significantly
reduce the number of terms involved.  Note that
\begin{equation} \label{d1}
\|{\bm f} - {\bm q} \hspace{0.005in} \|^2 \; = \;
\sum_{\alpha \notin {S_{\bm f}}} ({\bm f}_\alpha-{\bm q}_\alpha)^2 +
\sum_{\alpha \in {S_{\bm f}}} ({\bm f}_\alpha-{\bm q}_\alpha)^2 \\[-.02in]
\end{equation}
Using equation (\ref{model1}) --- ${\bm q}_\alpha = {\bm p}_{\alpha_0}
\nudge {\bm p}_{\alpha_1}$ (suppressing superscripts to streamline
notation) --- together with the fact that ${\bm f}_\alpha = 0$ in
every term of the first sum above, the first sum reduces to
\begin{eqnarray}
  \sum_{\langle \alpha_0, \nudge \alpha_1 \rangle \nudge \notin
    {S_{\bm f}}} ({\bm p}_{\alpha_0} \nudge {\bm p}_{\alpha_1})^2 & =
  & \sum_{\langle \alpha_0, \nudge \alpha_1 \rangle} ({\bm
    p}_{\alpha_0})^2 \nudge ({\bm p}_{\alpha_1})^2 \, - \sum_{\langle
    \alpha_0, \nudge \alpha_1 \rangle\in {S_{\bm f}}} \big( {\bm
    p}_{\alpha_0}\nudge {\bm p}_{\alpha_1} \big)^2 \nonumber
  \\[0.05in] & = & {\sum_{g}}^2 ({\bm p}_{g})^2 \, - \sum_{\alpha \in
    {S_{\bm f}}} ( {\bm q}_{\alpha})^2
      \label{d2}
\end{eqnarray}
\mbox{ }\\[-.15in]
It follows from (\ref{d1}) and (\ref{d2}) that
\begin{eqnarray}
  \|{\bm f} - {\bm q} \hspace{0.005in} \|^2
  & = & 
      {\sum_{g}}^2 ({\bm p}_{g})^2 \, +
      \sum_{\alpha \in {S_{\bm f}}} ({\bm f}_\alpha-{\bm q}_\alpha)^2 -
      \sum_{\alpha \in {S_{\bm f}}} ( {\bm q}_{\alpha})^2
      \nonumber \\[0.05in]
      & = &
      {\sum_{g}}^2 ({\bm p}_{g})^2 \, +
      \sum_{\alpha \in {S_{\bm f}}} {\bm f}_\alpha ({\bm f}_\alpha- 2 {\bm q}_\alpha) \label{d3}
\end{eqnarray}
\mbox{ }\\[-.1in] which involves $2^\ell + |S_{\bm f}|$ terms,
assuming that  $S_{\bm f}$ is known as a byproduct of computing ${\bm f}$.



\section{Simplification} 
The haploid case simplified by equations (\ref{Mhat}) and (\ref{model5})
are the consequence of specializing to Vose's infinite population model and computing in the Walsh basis. Time switching between the standard basis and the Walsh basis is negligible; the fast Walsh transform (in dimension $n$) has complexity $n \nudge \log n$ \cite{Shanks1969}.

Only one mixing matrix as opposed to $2^\ell$ matrices is needed to compute the next generation; evolution equation (\ref{model5}) references the same matrix for every $g$, whereas evolution equation (\ref{model3}) depends upon a different matrix $M_g$ for each choice of $g$. The matrix is computed by a single sum as opposed to a triple sum; compare equation (\ref{Mhat}) with equation (\ref{transmission}).  Also, the relevant quadratic form is computed with a single sum as opposed to a double sum; computing via (\ref{model5}) is linear time in the size of $g \mathcal{R}$ (for each $g$) as opposed to the quadratic time computation (for each $g$) represented by equation (\ref{model3}).

From a computational standpoint, the best-case scenario is where
recomputation of the matrices mentioned in the previous paragraph is
obviated by sufficient memory.  The reduction from $2^\ell$ matrices
to one matrix helps significantly in that regard. To demonstrate these advantages in concrete terms, consider computing
with genomes of length $\ell \in \{4,6,8,10,12,14\}$.  The fact that
only the mixing matrix need be involved is significant; using $2^{14}$
matrices each of which contains $2^{14} \times 2^{14}$ entries of type
\verb@double@ requires $32$ terabytes, whereas the mixing matrix at
$2$ gigabytes fits easily within the memory of a laptop.


